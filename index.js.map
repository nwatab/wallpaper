{"version":3,"file":"index.js","sources":["../src/models/Matrix.ts","../src/models/shapes/Shape.ts","../src/models/shapes/Rectangule.ts","../src/models/shapes/Circle.ts","../src/models/motif/Motif.ts","../src/models/Vector2D.ts","../src/models/motif/SquareMotif.ts","../src/models/motif/RectanguleMotif.ts","../src/assets/motifs/random-square.ts","../src/wallpaperGroups/WallpaperGroup.ts","../src/wallpaperGroups/implementations/P1Group.ts","../src/app.ts","../src/renderers/SVGRenderer.ts","../src/components/MotifGallery.ts","../src/components/WallpaperGroupGallery.ts","../src/tiling/Tiling.ts","../src/components/WallpaperView.ts","../src/index.ts"],"sourcesContent":["export class Matrix {\n  private elements: number[];\n\n  constructor(\n    a11: number = 1,\n    a21: number = 0,\n    a12: number = 0,\n    a22: number = 1,\n    a13: number = 0,\n    a23: number = 0,\n  ) {\n    this.elements = [a11, a21, a12, a22, a13, a23];\n  }\n\n  // 単位行列\n  static identity(): Matrix {\n    return new Matrix();\n  }\n\n  // 平行移動行列\n  static translation(dx: number, dy: number): Matrix {\n    return new Matrix(1, 0, 0, 1, dx, dy);\n  }\n\n  // スケーリング行列\n  static scaling(sx: number, sy: number): Matrix {\n    return new Matrix(sx, 0, 0, sy, 0, 0);\n  }\n\n  // 回転行列（ラジアン）\n  static rotation(angle: number): Matrix {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return new Matrix(cos, sin, -sin, cos, 0, 0);\n  }\n\n  // シアー行列\n  static shear(shx: number, shy: number): Matrix {\n    return new Matrix(1, shx, shy, 1, 0, 0);\n  }\n\n  // 行列の乗算\n  multiply(other: Matrix): Matrix {\n    const [a11_1, a21_1, a12_1, a22_1, a13_1, a23_1] = this.elements;\n    const [a11_2, a21_2, a12_2, a22_2, a13_2, a23_2] = other.elements;\n\n    // 結果の行列要素計算\n    const a11 = a11_1 * a11_2 + a12_1 * a21_2;\n    const a21 = a21_1 * a11_2 + a22_1 * a21_2;\n    const a12 = a11_1 * a12_2 + a12_1 * a22_2;\n    const a22 = a21_1 * a12_2 + a22_1 * a22_2;\n    const a13 = a11_1 * a13_2 + a12_1 * a23_2 + a13_1;\n    const a23 = a21_1 * a13_2 + a22_1 * a23_2 + a23_1;\n\n    return new Matrix(a11, a21, a12, a22, a13, a23);\n  }\n\n  // 点に変換を適用\n  applyToPoint(point: [number, number]): [number, number] {\n    const [a11, a21, a12, a22, a13, a23] = this.elements;\n    const [x, y] = point;\n\n    const newX = a11 * x + a12 * y + a13;\n    const newY = a21 * x + a22 * y + a23;\n    return [newX, newY];\n  }\n\n  // ベクトルに変換（平行移動なし）を適用\n  applyToVector(vector: [number, number]): [number, number] {\n    const [a11, a21, a12, a22] = this.elements;\n    const [x, y] = vector;\n\n    const newX = a11 * x + a12 * y;\n    const newY = a21 * x + a22 * y;\n    return [newX, newY];\n  }\n\n  // 逆行列の計算\n  inverse(): Matrix | null {\n    const [a11, a21, a12, a22, a13, a23] = this.elements;\n    const det = a11 * a22 - a21 * a12;\n    if (det === 0) {\n      return null; // 逆行列なし\n    }\n    const a11Inv = a22 / det;\n    const a21Inv = -a21 / det;\n    const a12Inv = -a12 / det;\n    const a22Inv = a11 / det;\n    const a13Inv = (a12 * a23 - a22 * a13) / det;\n    const a23Inv = (a21 * a13 - a11 * a23) / det;\n\n    return new Matrix(a11Inv, a21Inv, a12Inv, a22Inv, a13Inv, a23Inv);\n  }\n\n  // 単位行列かどうか\n  isIdentity(): boolean {\n    const [a11, a21, a12, a22, a13, a23] = this.elements;\n    return (\n      a11 === 1 && a21 === 0 && a12 === 0 && a22 === 1 && a13 === 0 && a23 === 0\n    );\n  }\n\n  // 行列の要素取得\n  getElements(): {\n    a11: number;\n    a21: number;\n    a12: number;\n    a22: number;\n    a13: number;\n    a23: number;\n  } {\n    const [a11, a21, a12, a22, a13, a23] = this.elements;\n    return {\n      a11,\n      a21,\n      a12,\n      a22,\n      a13,\n      a23,\n    } as const;\n  }\n\n  // JSONシリアライズ用\n  toJSON(): number[] {\n    return this.elements;\n  }\n}\n","import { Matrix } from '../Matrix';\nimport { Transformation } from '../Transformation';\n\n/** Basic shape class that is used inside a motif */\nexport abstract class Shape {\n  public transformMatrix: Matrix;\n  constructor(transformMatrix?: Matrix) {\n    this.transformMatrix = transformMatrix ?? Matrix.identity();\n  }\n  transform(transformation: Transformation): this {\n    const newMatrix = this.transformMatrix.multiply(transformation.getMatrix());\n    const clonedShape = this.clone();\n    clonedShape.transformMatrix = newMatrix;\n    return clonedShape;\n  }\n  protected abstract clone(): this;\n}\n","import { Matrix } from '../Matrix';\nimport { Shape } from './Shape';\n\nimport { Transformation } from '../Transformation';\nexport class Rectangle extends Shape {\n  constructor(\n    public x: number,\n    public y: number,\n    public width: number,\n    public height: number,\n    public fill: string,\n    public transformMatrix: Matrix = Matrix.identity(),\n  ) {\n    super();\n  }\n  transform(transformation: Transformation): this {\n    // 既存のtransformMatrixに新しい変換を合成する\n    const newMatrix = transformation.getMatrix().multiply(this.transformMatrix);\n    return new Rectangle(\n      this.x,\n      this.y,\n      this.width,\n      this.height,\n      this.fill,\n      newMatrix,\n    ) as this;\n  }\n  clone(): this {\n    return new Rectangle(\n      this.x,\n      this.y,\n      this.width,\n      this.height,\n      this.fill,\n      this.transformMatrix,\n    ) as this;\n  }\n}\n","import { Matrix } from '../Matrix';\nimport { Shape } from './Shape';\n\nexport class Circle extends Shape {\n  constructor(\n    public cx: number,\n    public cy: number,\n    public r: number,\n    public fill: string,\n    transformMatrix?: Matrix,\n  ) {\n    super(transformMatrix);\n  }\n  protected clone(): this {\n    return new Circle(\n      this.cx,\n      this.cy,\n      this.r,\n      this.fill,\n      this.transformMatrix,\n    ) as this;\n  }\n  // その他のプロパティやメソッド\n}\n","import { Shape } from '../shapes/Shape';\nimport { Transformation } from '../Transformation';\n\nexport abstract class Motif {\n  shapes: Shape[];\n  constructor(shapes: Shape[]) {\n    this.shapes = shapes;\n  }\n  // モチーフ全体に変換を適用し、新しいMotifを返す\n  applyTransformation(transformation: Transformation): this {\n    const transformedShapes = this.shapes.map((shape) =>\n      shape.transform(transformation),\n    );\n    return new (this.constructor as new (shapes: Shape[]) => this)(\n      transformedShapes,\n    );\n  }\n}\n","export class Vector2D {\n  constructor(public x: number, public y: number) {}\n\n  /**\n   * Vector addition.\n   * @param other The vector to add.\n   * @returns A new vector which is the sum of this vector and the given vector.\n   */\n  add(other: Vector2D): Vector2D {\n    return new Vector2D(this.x + other.x, this.y + other.y);\n  }\n  /**\n   * Scalar multiplication.\n   * @param scalar The scalar to multiply with.\n   * @returns A new vector which is the result of multiplying this vector by the given scalar.\n   */\n  scale(scalar: number): Vector2D {\n    return new Vector2D(this.x * scalar, this.y * scalar);\n  }\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Normalizes the vector. If the vector is zero-length, returns null.\n   * @returns A new vector which is the normalized version of this vector, or null if this vector is zero-length.\n   */\n  normalize(): Vector2D | null {\n    const len = this.length();\n    if (len === 0) {\n      return null;\n    }\n    return new Vector2D(this.x / len, this.y / len);\n  }\n  dot(other: Vector2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n  angle(other: Vector2D): number | null {\n    if (this.length() === 0 || other.length() === 0) {\n      return null;\n    }\n    return Math.acos(this.dot(other) / (this.length() * other.length()));\n  }\n  getElements(): [number, number] {\n    return [this.x, this.y];\n  }\n  projectToX(): number {\n    return this.x;\n  }\n  projectToY(): number {\n    return this.y;\n  }\n}\n","import { Shape } from '../shapes';\nimport { Vector2D } from '../Vector2D';\nimport { Motif } from './Motif';\n\n/** Square with viewbox [0, 1] x [0, 1] */\nexport class SquareMotif extends Motif {\n  sideLength: number;\n  constructor(sideLength: number, shapes: Shape[]) {\n    super(shapes);\n    this.sideLength = sideLength;\n  }\n  getIndependentVectors(): [Vector2D, Vector2D] {\n    return [new Vector2D(this.sideLength, 0), new Vector2D(0, this.sideLength)];\n  }\n}\n","import { Shape } from '../shapes';\nimport { Vector2D } from '../Vector2D';\nimport { Motif } from './Motif';\n\nexport class RectanguleMotif extends Motif {\n  width: number;\n  height: number;\n  constructor(width: number, height: number, shapes: Shape[]) {\n    super([]);\n    this.width = width;\n    this.height = height;\n  }\n  getIndependentVectors(): [Vector2D, Vector2D] {\n    return [new Vector2D(this.width, 0), new Vector2D(0, this.height)];\n  }\n}\n","import { Circle, Rectangle, SquareMotif } from '@/models';\n\nexport const randomSquareMotif = new SquareMotif(1, [\n  new Rectangle(0.1, 0.1, 0.3, 0.3, 'red'),\n  new Rectangle(0.4, 0.5, 0.4, 0.4, 'green'),\n  new Circle(0.6, 0.6, 0.2, 'blue'),\n]);\n","import { Transformation, Motif, Shape, Vector2D } from '@/models';\nimport { FundamentalRegion, WallpaperGroupType } from '@/types';\n\nexport abstract class WallpaperGroup {\n  constructor(public groupType: WallpaperGroupType) {}\n  public tileVectors!: [Vector2D, Vector2D];\n\n  abstract generateTransformations(): Transformation[];\n  abstract computeTileVectors(motif: Motif): [Vector2D, Vector2D];\n  abstract createFundamentalRegion(motif: Motif): FundamentalRegion;\n  //  {\n  //   const transformations = this.generateTransformations();\n  //   let fundamentalShapes: Shape[] = [];\n  //   transformations.forEach((transformation) => {\n  //     const transformedMotif = motif.applyTransformation(transformation);\n  //     fundamentalShapes = fundamentalShapes.concat(transformedMotif.shapes);\n  //   });\n  //   return new Motif(fundamentalShapes);\n  // }\n}\n","import { FundamentalRegion } from '@/types';\nimport { WallpaperGroup } from '../WallpaperGroup';\nimport {\n  Motif,\n  RectanguleMotif,\n  SquareMotif,\n  Transformation,\n  Vector2D,\n} from '@/models';\n\nexport class P1Group extends WallpaperGroup {\n  constructor() {\n    super('p1');\n  }\n  generateTransformations(): Transformation[] {\n    return [];\n  }\n  computeTileVectors(\n    motif: RectanguleMotif | SquareMotif,\n  ): [Vector2D, Vector2D] {\n    return motif.getIndependentVectors();\n  }\n  createFundamentalRegion(motif: Motif): FundamentalRegion {\n    if (motif instanceof RectanguleMotif) {\n      return {\n        motifs: [motif],\n        tileVectors: [\n          new Vector2D(motif.width, 0),\n          new Vector2D(0, motif.height),\n        ],\n        regionType: 'Rectangle',\n      };\n    } else if (motif instanceof SquareMotif) {\n      return {\n        motifs: [motif],\n        tileVectors: [\n          new Vector2D(motif.sideLength, 0),\n          new Vector2D(0, motif.sideLength),\n        ],\n        regionType: 'Square',\n      };\n    } else {\n      throw new Error(`Unknown motif: ${motif}`);\n    }\n  }\n}\n","import { Motif } from '@/models';\nimport { P1Group, WallpaperGroup } from '@/wallpaperGroups';\nimport { randomSquareMotif } from './assets';\n\nexport type AppState = {\n  selectedMotif: Motif;\n  selectedWallpaperGroup: WallpaperGroup;\n  listeners: (() => void)[];\n};\n\nexport const appState: AppState = {\n  selectedMotif: randomSquareMotif,\n  selectedWallpaperGroup: new P1Group(),\n  listeners: [],\n};\n\n// 状態を更新するたびに、リスナーに通知\nexport function setAppState(state: Partial<AppState>) {\n  if (state.selectedMotif !== undefined) {\n    appState.selectedMotif = state.selectedMotif;\n  }\n  if (state.selectedWallpaperGroup !== undefined) {\n    appState.selectedWallpaperGroup = state.selectedWallpaperGroup;\n  }\n  // リスナーに通知\n  appState.listeners.forEach((listener) => listener());\n}\n\n// 状態変更時にコールバックを登録\nexport function subscribe(listener: () => void) {\n  appState.listeners.push(listener);\n}\n","import { Renderer } from './Renderer';\nimport { Circle, Matrix, Motif, Rectangle, Shape } from '@/models';\nimport { Vector2D } from '@/models';\nimport { FundamentalRegion } from '@/types';\n\nexport class SVGRenderer implements Renderer {\n  private svgContainer: SVGSVGElement;\n\n  constructor(svgContainer: SVGSVGElement) {\n    this.svgContainer = svgContainer;\n  }\n\n  setTileSize(tileSize: number): void {\n    // ロジカルなサイズが1x1の場合\n    this.svgContainer.setAttribute('viewBox', '0 0 1 1');\n    this.svgContainer.setAttribute('width', `${tileSize}px`);\n    this.svgContainer.setAttribute('height', `${tileSize}px`);\n    // アスペクト比を維持\n    this.svgContainer.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n  }\n\n  renderMotif(motif: Motif): void {\n    motif.shapes.forEach((shape) => {\n      const element = this.renderShape(shape);\n      this.svgContainer.appendChild(element);\n    });\n  }\n\n  renderFundamentalRegion(fundamentalRegion: FundamentalRegion): void {\n    const group = this.createGroupFromFundamentalRegion(fundamentalRegion);\n    this.svgContainer.appendChild(group);\n  }\n\n  renderTilesWithDefs(\n    fundamentalRegion: FundamentalRegion,\n    tileVectors: Vector2D[],\n    id: string = 'fundamental-region',\n  ): void {\n    // 1. <defs> 要素を取得または作成\n    const defs = this.getOrCreateDefsElement();\n\n    // 既に同じ id の定義が存在する場合は削除\n    const existingDef = defs.querySelector(`#${id}`);\n    if (existingDef) {\n      defs.removeChild(existingDef);\n    }\n\n    // 2. fundamentalRegion を <defs> 内に定義\n    const group = this.createGroupFromFundamentalRegion(fundamentalRegion);\n    group.setAttribute('id', id);\n    defs.appendChild(group);\n\n    // 3. tileVectors に基づいて <use> 要素を配置\n    tileVectors.forEach((vector) => {\n      const useElement = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'use',\n      );\n      useElement.setAttributeNS(\n        'http://www.w3.org/1999/xlink',\n        'href',\n        `#${id}`,\n      );\n\n      const transform = `translate(${vector.x}, ${vector.y}) scale(64)`;\n      useElement.setAttribute('transform', transform);\n\n      this.svgContainer.appendChild(useElement);\n    });\n  }\n\n  private createGroupFromFundamentalRegion(\n    fundamentalRegion: FundamentalRegion,\n  ): SVGGElement {\n    const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    fundamentalRegion.motifs.forEach((motif) => {\n      motif.shapes.forEach((shape) => {\n        const svgElement = this.renderShape(shape);\n        group.appendChild(svgElement);\n      });\n    });\n\n    return group;\n  }\n\n  private renderRectangle(rect: Rectangle): SVGRectElement {\n    const svgRect = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'rect',\n    );\n    svgRect.setAttribute('x', rect.x.toString());\n    svgRect.setAttribute('y', rect.y.toString());\n    svgRect.setAttribute('width', rect.width.toString());\n    svgRect.setAttribute('height', rect.height.toString());\n    svgRect.setAttribute('fill', rect.fill);\n\n    if (!rect.transformMatrix.isIdentity()) {\n      const transformAttr = this.matrixToTransformAttribute(\n        rect.transformMatrix,\n      );\n      svgRect.setAttribute('transform', transformAttr);\n    }\n    return svgRect;\n  }\n\n  private renderShape(shape: Shape) {\n    if (shape instanceof Rectangle) {\n      return this.renderRectangle(shape);\n    } else if (shape instanceof Circle) {\n      return this.renderCircle(shape);\n    } else {\n      throw new Error('Unsupported shape type');\n    }\n  }\n\n  private renderCircle(circle: Circle): SVGCircleElement {\n    const svgCircle = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'circle',\n    );\n    svgCircle.setAttribute('cx', circle.cx.toString());\n    svgCircle.setAttribute('cy', circle.cy.toString());\n    svgCircle.setAttribute('r', circle.r.toString());\n    svgCircle.setAttribute('fill', circle.fill);\n\n    if (!circle.transformMatrix.isIdentity()) {\n      const transformAttr = this.matrixToTransformAttribute(\n        circle.transformMatrix,\n      );\n      svgCircle.setAttribute('transform', transformAttr);\n    }\n    return svgCircle;\n  }\n\n  private matrixToTransformAttribute(matrix: Matrix): string {\n    const {\n      a11: a,\n      a21: b,\n      a12: c,\n      a22: d,\n      a13: e,\n      a23: f,\n    } = matrix.getElements();\n    return `matrix(${a}, ${b}, ${c}, ${d}, ${e}, ${f})`;\n  }\n\n  // <defs> 要素を取得または作成\n  private getOrCreateDefsElement(): SVGDefsElement {\n    let defs = this.svgContainer.querySelector('defs');\n    if (!defs) {\n      defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n      this.svgContainer.prepend(defs);\n    }\n    return defs;\n  }\n\n  // 描画をクリア\n  clear(): void {\n    while (this.svgContainer.firstChild) {\n      this.svgContainer.removeChild(this.svgContainer.firstChild);\n    }\n  }\n}\n","import { Motif } from '@/models';\nimport { randomSquareMotif } from '@/assets';\nimport { setAppState } from '@/app';\nimport { Renderer, SVGRenderer } from '@/renderers';\n\nexport class MotifGallery {\n  private motifs: Motif[] = [randomSquareMotif];\n  private container: HTMLElement;\n\n  constructor(containerId: string) {\n    this.container = document.getElementById(containerId)!;\n    this.render();\n    this.setupEventHandlers();\n  }\n\n  private render() {\n    // モチーフを表示するHTMLを生成\n    this.container.innerHTML = this.motifs\n      .map(\n        (motif, index) => `\n        <div class=\"motif-preview\" data-motif-index=\"${index}\">\n          ${this.renderMotifPreview(motif).outerHTML}\n        </div>\n      `,\n      )\n      .join('');\n  }\n\n  private renderMotifPreview(motif: Motif): SVGSVGElement {\n    const svgSvgElement = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'svg',\n    );\n    svgSvgElement.setAttribute('viewBox', '0 0 1 1');\n    const svgRenderer = new SVGRenderer(svgSvgElement);\n    const motifPreview = new MotifPreview(svgRenderer);\n    motifPreview.render(motif);\n    return svgSvgElement;\n  }\n\n  private setupEventHandlers() {\n    const motifItems = this.container.querySelectorAll('.motif-preview');\n    motifItems.forEach((element) => {\n      element.addEventListener('click', () => {\n        const index = element.getAttribute('data-motif-index')!;\n        const selectedMotif = this.motifs[parseInt(index)];\n        // 状態を更新\n        setAppState({ selectedMotif });\n      });\n    });\n  }\n}\n\nclass MotifPreview {\n  private renderer: Renderer;\n  constructor(renderer: Renderer) {\n    this.renderer = renderer;\n  }\n  render(motif: Motif) {\n    this.renderer.renderMotif(motif);\n  }\n}\n","import { FundamentalRegion, WallpaperGroupType } from '@/types';\nimport { WallpaperGroup, P1Group } from '@/wallpaperGroups';\nimport { appState, setAppState } from '@/app';\nimport { Renderer, SVGRenderer } from '@/renderers';\n\nexport class WallpaperGroupGallery {\n  private groups: { name: WallpaperGroupType; instance: WallpaperGroup }[] = [\n    { name: 'p1', instance: new P1Group() },\n    // 他の壁紙群を追加\n  ];\n  private container: HTMLElement;\n\n  constructor(containerId: string) {\n    this.container = document.getElementById(containerId)!;\n    this.render();\n    this.setupEventHandlers();\n  }\n\n  private render() {\n    this.container.innerHTML = this.groups\n      .map(\n        ({ instance, name }, index) => `\n        <div class=\"group-preview\" data-group-index=\"${name}\">\n          ${this.renderGroupPreview(instance).outerHTML}\n        </div>\n      `,\n      )\n      .join('');\n  }\n\n  private renderGroupPreview(group: WallpaperGroup) {\n    const svgSvgElement = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'svg',\n    );\n    svgSvgElement.setAttribute('viewBox', '0 0 1 1');\n    const svgRenderer = new SVGRenderer(svgSvgElement);\n    const groupPreview = new GroupPreview(svgRenderer);\n    const fundamentalRegion = group.createFundamentalRegion(\n      appState.selectedMotif,\n    );\n    groupPreview.render(fundamentalRegion);\n    return svgSvgElement;\n  }\n\n  private setupEventHandlers() {\n    const groupItems = this.container.querySelectorAll('.group-item');\n    groupItems.forEach((element) => {\n      element.addEventListener('click', () => {\n        const selectedWallpaperGroupName = element.getAttribute(\n          'data-group-index',\n        ) as WallpaperGroupType;\n        const group = this.groups.find(\n          (group) => group.name === selectedWallpaperGroupName,\n        )!;\n        const selectedWallpaperGroup = group.instance;\n        setAppState({ selectedWallpaperGroup });\n      });\n    });\n  }\n}\n\nclass GroupPreview {\n  private renderer: Renderer;\n\n  constructor(renderer: Renderer) {\n    this.renderer = renderer;\n  }\n\n  render(fundamentalRegion: FundamentalRegion) {\n    this.renderer.renderFundamentalRegion(fundamentalRegion);\n  }\n}\n","import { Vector2D } from '@/models';\n\nexport class Tiling {\n  constructor(private width: number, private height: number) {}\n  generateWallpaperMotif(vectorA: Vector2D, vectorB: Vector2D): Vector2D[] {\n    const vectors: Vector2D[] = [];\n    const tileCountX = Math.ceil(\n      this.width / Math.abs(vectorA.add(vectorB).projectToX()),\n    );\n    const tileCountY = Math.ceil(\n      this.height / Math.abs(vectorA.add(vectorB).projectToY()),\n    );\n    for (let i = -1; i <= tileCountX; i++) {\n      for (let j = -1; j <= tileCountY; j++) {\n        const vec = vectorA.scale(i).add(vectorB.scale(j));\n        vectors.push(vec);\n      }\n    }\n    return vectors;\n  }\n}\n","import { appState, subscribe } from '@/app';\nimport { Tiling } from '@/tiling';\nimport { SVGRenderer } from '@/renderers';\nimport { Motif } from '@/models';\n\nexport class WallpaperView {\n  private container: SVGSVGElement;\n  private renderer: SVGRenderer;\n  private resizeTimeout: number | undefined;\n\n  constructor(containerId: string) {\n    const svgElement = document.querySelector<SVGSVGElement>(`#${containerId}`);\n    if (!svgElement) {\n      throw new Error(`SVG element with id ${containerId} not found.`);\n    }\n    this.container = svgElement;\n    this.renderer = new SVGRenderer(this.container);\n    // 状態変更時に壁紙を再描画するようにリスナーを登録\n    subscribe(() => this.render());\n    window.addEventListener('resize', () => this.onWindowResize());\n  }\n  private onWindowResize(): void {\n    // デバウンス処理：前回のタイムアウトをクリア\n    if (this.resizeTimeout !== undefined) {\n      clearTimeout(this.resizeTimeout);\n    }\n    // 350ms 後に再描画\n    this.resizeTimeout = window.setTimeout(() => {\n      this.render();\n      this.resizeTimeout = undefined;\n    }, 350);\n  }\n\n  private render() {\n    const { selectedMotif, selectedWallpaperGroup } = appState;\n\n    if (!selectedMotif || !selectedWallpaperGroup) {\n      // 必要な情報が揃っていない場合は表示しない\n      this.container.innerHTML =\n        '<p>Please select a motif and a wallpaper group.</p>';\n      return;\n    }\n\n    // 1. タイルベクトルを計算・取得\n    selectedWallpaperGroup.computeTileVectors(selectedMotif);\n\n    // 2. ファンダメンタル・リージョンを生成\n    const fundamentalRegion =\n      selectedWallpaperGroup.createFundamentalRegion(selectedMotif);\n    // 3. タイリングを行い、壁紙全体を生成\n    const tiling = new Tiling(window.innerWidth, window.innerHeight);\n\n    const [tileVectorA, tileVectorB] = fundamentalRegion.tileVectors.map((v) =>\n      v.scale(64),\n    );\n    const tileVectors = tiling.generateWallpaperMotif(tileVectorA, tileVectorB);\n\n    // 4. 描画を実行\n    this.renderer.clear(); // 既存の描画をクリア\n    this.renderer.renderTilesWithDefs(fundamentalRegion, tileVectors);\n  }\n}\n","import {\n  MotifGallery,\n  WallpaperGroupGallery,\n  WallpaperView,\n} from '@/components';\nimport { setAppState } from '@/app';\nimport { randomSquareMotif } from '@/assets';\nimport { P1Group } from '@/wallpaperGroups';\nimport './styles/index.css';\n\nfunction initializeApp() {\n  // 各コンポーネントを初期化\n  new MotifGallery('motif-gallery');\n  new WallpaperGroupGallery('wallpaper-group-gallery');\n  new WallpaperView('wallpaper-view');\n\n  // 初期のモチーフと壁紙群を設定\n  setAppState({\n    selectedMotif: randomSquareMotif,\n    selectedWallpaperGroup: new P1Group(),\n  });\n}\n\nwindow.onload = () => {\n  initializeApp();\n};\n"],"names":["Matrix","constructor","a11","a21","a12","a22","a13","a23","this","elements","identity","translation","dx","dy","scaling","sx","sy","rotation","angle","cos","Math","sin","shear","shx","shy","multiply","other","a11_1","a21_1","a12_1","a22_1","a13_1","a23_1","a11_2","a21_2","a12_2","a22_2","a13_2","a23_2","applyToPoint","point","x","y","applyToVector","vector","inverse","det","isIdentity","getElements","toJSON","Shape","transformMatrix","transform","transformation","newMatrix","getMatrix","clonedShape","clone","Rectangle","width","height","fill","super","Circle","cx","cy","r","Motif","shapes","applyTransformation","transformedShapes","map","shape","Vector2D","add","scale","scalar","length","sqrt","normalize","len","dot","acos","projectToX","projectToY","SquareMotif","sideLength","getIndependentVectors","RectanguleMotif","randomSquareMotif","WallpaperGroup","groupType","P1Group","generateTransformations","computeTileVectors","motif","createFundamentalRegion","motifs","tileVectors","regionType","Error","appState","selectedMotif","selectedWallpaperGroup","listeners","setAppState","state","undefined","forEach","listener","SVGRenderer","svgContainer","setTileSize","tileSize","setAttribute","renderMotif","element","renderShape","appendChild","renderFundamentalRegion","fundamentalRegion","group","createGroupFromFundamentalRegion","renderTilesWithDefs","id","defs","getOrCreateDefsElement","existingDef","querySelector","removeChild","useElement","document","createElementNS","setAttributeNS","svgElement","renderRectangle","rect","svgRect","toString","transformAttr","matrixToTransformAttribute","renderCircle","circle","svgCircle","matrix","a","b","c","d","e","f","prepend","clear","firstChild","MotifGallery","containerId","container","getElementById","render","setupEventHandlers","innerHTML","index","renderMotifPreview","outerHTML","join","svgSvgElement","svgRenderer","MotifPreview","querySelectorAll","addEventListener","getAttribute","parseInt","renderer","WallpaperGroupGallery","groups","name","instance","renderGroupPreview","groupPreview","GroupPreview","selectedWallpaperGroupName","find","Tiling","generateWallpaperMotif","vectorA","vectorB","vectors","tileCountX","ceil","abs","tileCountY","i","j","vec","push","WallpaperView","window","onWindowResize","resizeTimeout","clearTimeout","setTimeout","tiling","innerWidth","innerHeight","tileVectorA","tileVectorB","v","onload"],"mappings":"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"}